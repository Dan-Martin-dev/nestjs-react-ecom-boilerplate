services:
  # PostgreSQL POSTGRES
  db:
    image: postgres:16-alpine
    restart: always
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  # API (NestJS)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api-dev 
    restart: always
    ports:
      - "3001:3001"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount the entire project for hot-reloading
      - .:/app
      # Exclude node_modules to use container's version
      - /app/node_modules
      - /app/apps/api/node_modules
      - /app/apps/web/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-dev.rule=Host(`api.localhost`)"
      - "traefik.http.routers.api-dev.entrypoints=web"
      - "traefik.http.services.api-dev.loadbalancer.server.port=3001"
  
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: web-dev
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=${NODE_ENV}
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      - api
    volumes:
      # Mount the entire project for hot-reloading
      - .:/app
      # Use a named volume for node_modules
      - web_node_modules:/app/node_modules
    command: pnpm --filter web dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-dev.rule=Host(`localhost`)"
      - "traefik.http.routers.web-dev.entrypoints=web"
      - "traefik.http.services.web-dev.loadbalancer.server.port=3000"


  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v2.10
    restart: always
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"


volumes:
  db_data:
  redis_data:
  api_node_modules:
  web_node_modules: