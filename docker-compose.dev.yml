services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
  # API (NestJS)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api-dev 
    restart: always
    ports:
      - "3001:3001"
      - "5555:5555"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount source code for hot-reloading, but preserve container's node_modules and built packages
      - ./apps/api/src:/app/apps/api/src
      - ./apps/api/package.json:/app/apps/api/package.json
      - ./packages:/app/packages
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
      # Exclude node_modules to use container's version
      - /app/node_modules
      - /app/apps/api/node_modules
      - /app/apps/web/node_modules
      - /app/packages/db/node_modules
      - /app/packages/shared/node_modules
      - /app/packages/ui/node_modules
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Frontend (React/Vite)
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: web-dev
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3001/api/v1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount source code for hot-reloading, but preserve container's node_modules and built packages
      - ./apps/web/src:/app/apps/web/src
      - ./apps/web/public:/app/apps/web/public
      - ./apps/web/index.html:/app/apps/web/index.html
      - ./apps/web/package.json:/app/apps/web/package.json
      - ./apps/web/vite.config.ts:/app/apps/web/vite.config.ts
      - ./apps/web/tsconfig.json:/app/apps/web/tsconfig.json
      - ./apps/web/tailwind.config.js:/app/apps/web/tailwind.config.js
      - ./apps/web/postcss.config.js:/app/apps/web/postcss.config.js
      - ./packages:/app/packages
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
      # Use a named volume for node_modules to preserve container's version
      - web_node_modules:/app/node_modules
      - /app/apps/web/node_modules
      - /app/packages/shared/node_modules
      - /app/packages/ui/node_modules
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  redis_data:
  api_node_modules:
  web_node_modules: