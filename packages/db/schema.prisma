// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ----------------------------------------
// GENERATOR & DATASOURCE
// ----------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or "mysql", "sqlite", "sqlserver", "mongodb"
  url      = env("DATABASE_URL")
}

// ----------------------------------------
// ENUMS
// ----------------------------------------

enum Role {
  CUSTOMER
  ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
}

enum InventoryChangeType {
  SALE
  RESTOCK
  ADJUSTMENT
  RETURN
}

enum ProductAttributeType {
  COLOR
  SIZE           // XS, S, M, L, XL, XXL
  MATERIAL       // Cotton, Polyester, Denim
  SEASON         // Verano, Invierno, Oto√±o, Primavera
  GENDER         // Masculino, Femenino, Unisex
  STYLE          // Casual, Formal, Deportivo
  FIT            // Slim, Regular, Loose
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  CREDIT_CARD
  BANK_TRANSFER
  MERCADO_PAGO     // Add this - most popular in Argentina
  RAPIPAGO         // Cash payment network
  PAGO_FACIL       // Cash payment network
  BANK_DEBIT 
}

enum OrderStatus {
  PENDING     // Order created, awaiting payment or processing
  PROCESSING  // Payment received, order is being prepared
  SHIPPED     // Order has been shipped
  DELIVERED   // Order has been delivered
  CANCELLED   // Order was cancelled
  REFUNDED    // Order was refunded
}

enum OrderTrackingStatus {
  ORDER_PLACED
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  EXCEPTION
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum InvoiceType {
  A     // Used for B2B with VAT discrimination
  B     // Used for B2C, no VAT discrimination
  C     // Used for exempt taxpayers
  M     // Used for monotributo
  E     // Used for exports
  NC_A  // Credit note type A
  NC_B  // Credit note type B
  NC_C  // Credit note type C
  ND_A  // Debit note type A
  ND_B  // Debit note type B
}

enum ImageFormat {
  JPEG
  PNG
  SVG
  WEBP
  GIF
}

enum ImageUsage {
  THUMBNAIL
  GALLERY
  PRINT
  WEB
  MOBILE
}

// ----------------------------------------
// USER & ACCOUNT MANAGEMENT
// ----------------------------------------

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?  // Made optional for OAuth users
  name      String?
  phone     String?  // Phone number for SMS notifications and delivery contact
  taxId     String?  // CUIT/CUIL for invoicing (required for B2B transactions in Argentina)
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth fields
  provider   String?  // 'google', 'facebook', 'instagram'
  providerId String?  // OAuth provider's user ID
  picture    String?  // Profile picture URL from OAuth provider

  addresses Address[]
  orders    Order[]
  reviews   Review[]
  cart      Cart? // A user can have one active cart
  Wishlist  Wishlist[]

  // DB-backed refresh tokens for secure rotation/revocation
  RefreshToken RefreshToken[]

  @@index([provider, providerId])
}

model Address {
  id        String   @id @default(cuid())
  street    String
  streetNumber String? 
  city      String
  province  String     
  zipCode   String
  phone     String?   // Contact phone for deliveries (required by most carriers in Argentina)
  neighborhood String? // Barrio - important in Argentina
  floor     String?    // Piso (for apartments)
  apartment String?    // Departamento
  country   String
  type      AddressType
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // For orders to snapshot addresses
  OrderShippingAddress Order[] @relation("ShippingAddressForOrder")
  OrderBillingAddress  Order[] @relation("BillingAddressForOrder")
}

model Wishlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) // Added for consistency
  updatedAt DateTime @updatedAt // Added for consistency

  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

// ----------------------------------------
// PRODUCT CATALOG
// ----------------------------------------

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique // For SEO-friendly URLs
  description String?
  deletedAt   DateTime? // For soft deletes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parentId String?
  parent   Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("SubCategories")
  Discount Discount[] // Discounts applicable to this category

  Product Product[]
}

model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique // For SEO-friendly URLs
  description   String?
  price         Decimal  // Use Decimal for monetary values
  isActive      Boolean  @default(true)
  deletedAt     DateTime? // For soft deletes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  categories Category[]      
  images     ProductImage[]
  variants   ProductVariant[]
  reviews    Review[]
  Wishlist   Wishlist[]
  metaTitle       String?
  metaDescription String?
  // For linking to discounts (many-to-many)
  applicableDiscounts Discount[] @relation("DiscountProducts")

  // Direct relation to attributes for this product
  attributes          ProductAttribute[] @relation("ProductToAttribute")

  // Attribute values specific to this product
  attributeValues     ProductAttributeValue[]

  // NEW: Links to global attribute values used by this product
  globalAttributeValues ProductAttributeGlobalValue[]

  ProductView ProductView[]

  @@index([isActive])
  @@index([createdAt])
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String   // URL to the image (e.g., S3, Cloudinary)
  altText   String?
  isDefault Boolean  @default(false) // For a primary product image
  createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt // Typically not needed for images unless you allow editing URL/alt
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Print quality fields
  format       ImageFormat @default(JPEG)
  isVector     Boolean     @default(false)
  printResolution Int?     // DPI for print quality (300+ recommended)
  usage        ImageUsage[]

  @@index([productId])
}

model ProductAttribute {
  id         String @id @default(cuid())
  name       String // "Size", "Color", "Material"
  type       ProductAttributeType
  isGlobal   Boolean @default(false) // NEW: Marks reusable attributes
  
  // For global attributes: predefined values available to all products
  globalValues ProductAttributeGlobalValue[]
  
  // For product-specific attributes: values specific to certain products
  attributeValues ProductAttributeValue[]
  
  // Relations
  products  Product[] @relation("ProductToAttribute")
  ProductVariantAttribute ProductVariantAttribute[]
  
  @@unique([name, type]) // Prevent duplicate attribute types
}

// NEW: Global attribute values (reusable across products)
model ProductAttributeGlobalValue {
  id          String @id @default(cuid())
  value       String // "S", "M", "L", "Black", "White"
  displayOrder Int   @default(0)
  
  attributeId String
  attribute   ProductAttribute @relation(fields: [attributeId], references: [id])
  
  // Products that use this global attribute value
  products    Product[]
  
  @@unique([attributeId, value]) // No duplicate values per attribute
}

// Model to store available attribute values for a product
model ProductAttributeValue {
  id           String @id @default(cuid())
  value        String // "Red", "XL", "Cotton"
  displayOrder Int    @default(0) // Controls the order of display in UI

  // Relations
  attributeId String
  attribute   ProductAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([attributeId, productId, value])
  @@index([attributeId])
  @@index([productId])
}

model ProductVariant {
  id            String   @id @default(cuid())
  name          String   // e.g., "Red / Large"
  sku           String   @unique // Stock Keeping Unit
  price         Decimal  // Can override product's base price
  stockQuantity Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  ProductVariantAttribute ProductVariantAttribute[] // Attributes specific to this variant
  orderItems              OrderItem[]
  cartItems               CartItem[]
  InventoryLog            InventoryLog[]

  @@index([productId])
  @@index([sku])
}

model ProductVariantAttribute {
  id String @id @default(cuid())
  // createdAt DateTime @default(now()) // Optional
  // updatedAt DateTime @updatedAt // Optional

  variantId   String
  variant     ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  attributeId String
  attribute   ProductAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade) // Cascade if attribute deletion means variant attribute is invalid

  value String // "Red", "L", "Cotton"

  @@unique([variantId, attributeId])
  @@index([variantId])
  @@index([attributeId])
}

model InventoryLog {
  id        String   @id @default(cuid())
  changeType InventoryChangeType // "SALE", "RESTOCK", "ADJUSTMENT", "RETURN" (Consider an enum)
  quantity   Int     // Positive for additions, negative for reductions
  reason     String?
  createdAt  DateTime @default(now())

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade) // Cascade if variant is deleted

  @@index([productVariantId])
  @@index([createdAt])
}

model ProductView {
  id        String   @id @default(cuid())
  viewedAt  DateTime @default(now())

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId    String?  // Optional: if logged-in user viewed
  // user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull) // If you want to link back to user

  shoppingSessionId String?
  shoppingSession   ShoppingSession? @relation(fields: [shoppingSessionId], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([userId])
  @@index([viewedAt])
  @@index([shoppingSessionId]) // Add this missing index
}


// ----------------------------------------
// SHOPPING CART & ORDERING
// ----------------------------------------

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String?  @unique // Nullable for guest carts, unique because a user has one active cart
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?  @unique // For guest carts, link to session ID

  items     CartItem[]
  shoppingSession ShoppingSession?

  // Constraint: either userId or sessionId must be present (handled at application level)
  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id              String   @id @default(cuid())
  quantity        Int
  priceAtAddition Decimal  // Price of the variant when added to cart
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@unique([cartId, productVariantId]) // Ensure a product variant appears only once per cart
  @@index([cartId])
  @@index([productVariantId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @default(cuid()) // More user-friendly order identifier
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     // Total amount including taxes, shipping, discounts
  currency        String      @default("ARS") // ISO currency code (ARS for Argentine Peso)
  orderDate       DateTime    @default(now())
  notes           String?     // Customer notes
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  userId          String?      // Nullable if you allow guest checkouts
  user            User?        @relation(fields: [userId], references: [id], onDelete: SetNull) // SetNull if user is deleted

  shippingAddressId String
  shippingAddress   Address @relation("ShippingAddressForOrder", fields: [shippingAddressId], references: [id], onDelete: Restrict)

  billingAddressId  String
  billingAddress    Address @relation("BillingAddressForOrder", fields: [billingAddressId], references: [id], onDelete: Restrict)

  items           OrderItem[]
  payment         Payment?
  invoice         Invoice?

  appliedDiscountId String?
  appliedDiscount   Discount? @relation("OrderDiscounts", fields: [appliedDiscountId], references: [id], onDelete:SetNull)

  @@index([userId])
  @@index([status])
  @@index([orderDate])
  @@index([orderNumber])
  OrderTracking OrderTracking[]
}

model OrderItem {
  id               String   @id @default(cuid())
  quantity         Int
  priceAtPurchase  Decimal  // Price of the variant at the time of purchase
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Restrict) // Restrict deletion if in an order

  @@index([orderId])
  @@index([productVariantId])
}

model OrderTracking {
  id        String   @id @default(cuid())
  status    OrderTrackingStatus
  message   String?
  location  String?
  timestamp DateTime @default(now())
  
  orderId String
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([timestamp])
}

model Payment {
  id               String        @id @default(cuid())
  amount           Decimal
  currency         String        @default("ARS") // ISO currency code (ARS for Argentine Peso)
  paymentMethod    PaymentMethod // e.g., "stripe", "paypal", "credit_card" (Consider an enum)
  transactionId    String?       @unique // From payment gateway
  status           PaymentStatus @default(PENDING)
  paymentDate      DateTime?     // When payment was successful
  installments     Int?          // Number of installments (common in Argentina: 3, 6, 12, 18 cuotas)
  installmentAmount Decimal?     // Amount per installment
  installmentPlan  String?       // Description of the installment plan (e.g., "3 cuotas sin inter√©s")
  paymentProviderReference String? // Payment provider's reference (e.g. MercadoPago operation ID)
  metadata         Json?         // Additional gateway details
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  orderId       String        @unique // Each order has one primary payment record
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([transactionId])
  @@index([status])
}

model Invoice {
  id              String      @id @default(cuid())
  invoiceNumber   String      @unique // AFIP assigned document number
  pointOfSale     Int         // Punto de Venta (POS) number registered in AFIP
  type            InvoiceType // A, B, C, etc.
  cae             String?     // CAE number (Electronic Authorization Code)
  caeExpirationDate DateTime? // When the CAE expires
  issueDate       DateTime    @default(now()) // When the invoice was issued
  netAmount       Decimal     // Amount before taxes
  taxAmount       Decimal     // Tax amount (IVA)
  totalAmount     Decimal     // Total with taxes
  taxBreakdown    Json?       // Detailed tax breakdown (different IVA rates: 21%, 10.5%, etc.)
  recipientTaxId  String?     // Customer's CUIT/CUIL
  recipientName   String?     // Customer's legal name
  recipientType   String?     // Responsible inscripto, consumidor final, etc.
  notes           String?     // Additional fiscal notes
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  orderId         String      @unique // Each order has one invoice
  order           Order       @relation(fields: [orderId], references: [id], onDelete: Restrict)
  
  @@index([invoiceNumber])
  @@index([cae])
  @@index([issueDate])
  @@index([orderId])
}

model ShippingMethod {
  id            String  @id @default(cuid())
  name          String  @unique
  description   String?
  cost          Decimal
  estimatedDays String? // e.g., "3-5 business days"
  isActive      Boolean @default(true) // Added
  createdAt     DateTime @default(now()) // Added
  updatedAt     DateTime @updatedAt // Added

  // If orders could link to a specific shipping method:
  // orders Order[]
}


// ----------------------------------------
// PROMOTIONS & FEEDBACK
// ----------------------------------------

model Discount {
  id                String       @id @default(cuid())
  code              String       @unique
  description       String?
  type              DiscountType
  value             Decimal      // Percentage (e.g., 10 for 10%) or fixed amount
  startDate         DateTime?
  endDate           DateTime?
  isActive          Boolean      @default(true)
  usageLimit        Int?         // Max times this coupon can be used overall
  usageLimitPerUser Int?         // Max times a single user can use this coupon
  timesUsed         Int          @default(0)
  minimumSpend      Decimal?     // Minimum order value for discount to apply
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Many-to-many: Which products/categories this discount applies to
  applicableProducts   Product[]    @relation("DiscountProducts")
  applicableCategories Category[]

  ordersWithThisDiscount Order[] @relation("OrderDiscounts") // Orders where this discount was applied

  @@index([code])
  @@index([isActive, startDate, endDate])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // e.g., 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // User can review a product only once
  @@index([productId])
  @@index([rating])
}


// ----------------------------------------
// ANALYTICS & TRACKING
// ----------------------------------------

model ShoppingSession {
  id        String   @id @default(cuid())
  sessionId String   @unique
  startTime DateTime @default(now())
  endTime   DateTime?
  
  ProductView ProductView[]

  cart      Cart? @relation(fields: [cartId], references: [id])
  cartId    String? @unique // ADD @unique here for one-to-one

  @@index([sessionId])
  @@index([startTime])
}

// DB-backed refresh tokens for secure rotation/revocation
model RefreshToken {
  id         String   @id @default(cuid())
  tokenHash  String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked    Boolean  @default(false)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  replacedById String? 
  replacedBy RefreshToken? @relation("RefreshTokenReplace", fields: [replacedById], references: [id])
  previous   RefreshToken[]   @relation("RefreshTokenReplace")

  @@index([userId])
}